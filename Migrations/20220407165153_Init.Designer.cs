// <auto-generated />
using System;
using FindJobWebApi.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FindJobWebApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220407165153_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FindJobWebApi.Models.Candidtate", b =>
                {
                    b.Property<decimal>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId1")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("VacancyId1")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("CandidateId");

                    b.HasIndex("UserId1");

                    b.HasIndex("VacancyId1");

                    b.ToTable("Candidtates");
                });

            modelBuilder.Entity("FindJobWebApi.Models.Firm", b =>
                {
                    b.Property<decimal>("FirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FirmAddressId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FirmAddressId1")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FirmId");

                    b.HasIndex("FirmAddressId1");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("FindJobWebApi.Models.FirmAddress", b =>
                {
                    b.Property<decimal>("FirmAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("AddressFirst")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressSecond")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FirmAddressId");

                    b.ToTable("FirmAddresses");
                });

            modelBuilder.Entity("FindJobWebApi.Models.User", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Experience")
                        .HasColumnType("real");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserAddressId1")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("UserId");

                    b.HasIndex("UserAddressId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FindJobWebApi.Models.UserAddress", b =>
                {
                    b.Property<decimal>("UserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("AddressFirst")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressSecond")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserAddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("FindJobWebApi.Models.Vacancy", b =>
                {
                    b.Property<decimal>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FirmId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FirmId1")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VacancyId");

                    b.HasIndex("FirmId1");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("FindJobWebApi.Models.Candidtate", b =>
                {
                    b.HasOne("FindJobWebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobWebApi.Models.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("FindJobWebApi.Models.Firm", b =>
                {
                    b.HasOne("FindJobWebApi.Models.FirmAddress", "FirmAddress")
                        .WithMany()
                        .HasForeignKey("FirmAddressId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirmAddress");
                });

            modelBuilder.Entity("FindJobWebApi.Models.User", b =>
                {
                    b.HasOne("FindJobWebApi.Models.UserAddress", "UserAddress")
                        .WithMany()
                        .HasForeignKey("UserAddressId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("FindJobWebApi.Models.Vacancy", b =>
                {
                    b.HasOne("FindJobWebApi.Models.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firm");
                });
#pragma warning restore 612, 618
        }
    }
}
